@page "/dashboard"
@using ExpenseTracker.Models
@inject NavigationManager NavigationManager
@inject TransactionService TransactionService
@inject DebtService DebtService
@inject IJSRuntime JSRuntime


<!-- Summary Cards -->
<div class="row g-4 mt-5">
    <!-- Total Wealth -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #28a745; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Total Wealth</h6>
                <p class="display-6" style="font-size: 17px;">@TotalWealth</p>
            </div>
        </div>
    </div>

    <!-- Total Outflows -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #ffc107; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Total Outflows</h6>
                <p class="display-6" style="font-size: 17px;">@TotalOutflows</p>
            </div>
        </div>
    </div>

    <!-- Total Inflows -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #ffc107; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Total Inflows</h6>
                <p class="display-6" style="font-size: 17px;">@TotalEarnings</p>
            </div>
        </div>
    </div>

    <!-- Net Balance -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #dc3545; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Net Balance</h6>
                <p class="display-6" style="font-size: 17px;">@TotalWealth</p>
            </div>
        </div>
    </div>

    <!-- Total Transactions -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #ffc107; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Total Transactions</h6>
                <p class="display-6" style="font-size: 17px;">@TotalTransactions</p>
            </div>
        </div>
    </div>

    <!-- Total Transaction Value -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #28a745; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Total Transaction Value</h6>
                <p class="display-6" style="font-size: 17px;;">@TotalTransactionValue</p>
            </div>
        </div>
    </div>

    <!-- Highest Inflow -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #dc3545; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Highest Inflow</h6>
                @if (HigInflow != null)
                {
                    <p class="display-6" style="font-size: 17px;">@HigInflow.Amount</p>
                    <small style="font-size: 17px;">@HigInflow.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                    <small style="font-size: 17px;">@HigInflow.Type</small>
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Lowest Inflow -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #28a745; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Lowest Inflow</h6>
                @if (LowInflow != null)
                {
                    <p class="display-6" style="font-size: 17px;">@LowInflow.Amount</p>
                    <small style="font-size: 17px;">@LowInflow.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                    <small style="font-size: 17px;">@LowInflow.Type</small>
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Highest Outflow -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #dc3545; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Highest Outflow</h6>
                @if (HigOutflow != null)
                {
                    <p class="display-6" style="font-size: 17px;">@HigOutflow.Amount</p>
                    <small style="font-size: 17px;">@HigOutflow.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Low Outflow -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #ffc107; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Low Outflow</h6>
                @if (LowOutflow != null)
                {
                    <p class="display-6" style="font-size: 17px;">@LowOutflow.Amount</p>
                    <small style="font-size: 17px; ">@LowOutflow.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                    <small style="font-size: 17px;">@LowOutflow.Type</small>
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Highest Debt -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #dc3545; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Highest Debt</h6>
                @if (HighDebt != null)
                {
                    <p class="display-6" style="font-size: 17px;">@HighDebt.Amount</p>
                    <small style="font-size: 17px;">@HighDebt.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Lowest Debt -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #28a745; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Lowest Debt</h6>
                @if (LowDebt != null)
                {
                    <p class="display-6" style="font-size: 17px;">@LowDebt.Amount</p>
                    <small style="font-size: 17px;">@LowDebt.Date.ToString("MMMM dd, yyyy")</small>
                    <br />
                }
                else
                {
                    <p style="font-size: 17px;">No data available</p>
                }
            </div>
        </div>
    </div>

    <!-- Cleared Debt -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #ffc107; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Cleared Debt</h6>
                <p class="display-6" style="font-size: 17px;">@ClearDebt</p>
            </div>
        </div>
    </div>

    <!-- Remaining Debt -->
    <div class="col-md-3">
        <div class="card summary-card" style="background-color: #dc3545; height: 150px;">
            <div class="card-body text-center">
                <h6 style="font-weight: bold;">Remaining Debt</h6>
                <p class="display-6" style="font-size: 17px;">@RemainingDebt</p>
            </div>
        </div>
    </div>
</div>




    <!-- Pending Debts Section -->
<div class="row mt-5">
    <div class="col-12">
        <h3>Pending Debts</h3>
        @if (PendingDebts?.Any() ?? false)
        {
            <ul class="list-group">
                @foreach (var debt in PendingDebts)
                {
                    <li class="list-group-item">
                        <span><strong>Debt Amount:</strong> @debt.Amount</span>
                        <br />
                        <span><strong>Due Date:</strong> @debt.DueDate.ToString("MMMM dd, yyyy")</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No pending debts available.</p>
        }
    </div>
</div>


    <div class="mt-5">
        <!-- Date Range Filter -->
        <div class="row mb-4">
            <div class="col-12">
                <h5 class="mb-3">Filter by Date Range</h5>
                <div class="d-flex align-items-center">
                    <input type="date" class="form-control me-2" style="max-width: 200px;" @bind="StartDate" />
                    <span class="mx-2">to</span>
                    <input type="date" class="form-control me-2" style="max-width: 200px;" @bind="EndDate" />
                    <button @onclick="FilterTransactionByDate" class="btn btn-success">Apply Date Filter</button>
                </div>
            </div>
        </div>
    </div>


<h3 class="mb-4">Filtered Transactions</h3>

@if (FilteredItems?.Any() ?? false)
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped table-sm" style="background-color: #28a745; color: white; width: 80%;">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Type</th>
                    <th scope="col">Tags</th>
                    <th scope="col">Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in FilteredItems)
                {
                    <tr style="background-color: #e9ecef;">
                        <td>@transaction.Date.ToString("MMMM dd, yyyy")</td>
                        <td>@transaction.Type</td>
                        <td>@string.Join(", ", transaction.Tags ?? new List<string>())</td>
                        <td style="color: black;">@transaction.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        No transactions found matching the criteria.
    </div>
}

<style>
    table th, table td {
        white-space: nowrap; /* Prevent text from wrapping to the next line */
    }

    /* Add a light grey color for the rows */
    table tbody tr {
        background-color: #e9ecef; /* Light grey for rows */
    }

    /* Change amount text color to black */
    table td {
        color: black;
    }
</style>


@code {
    private decimal TotalEarnings = 0;
    private decimal TotalOutflows = 0;
    private decimal TotalWealth = 0;
    private decimal TotalTransactions = 0;
    private decimal TotalTransactionValue = 0;
    private DateTime StartDate = DateTime.Now.AddMonths(-1); // Default to last month
    private DateTime EndDate = DateTime.Now;
    private List<TransactionModel> FilteredItems = new();
    private TransactionModel HigInflow;
    private TransactionModel LowInflow;
    private TransactionModel HigOutflow;
    private TransactionModel LowOutflow;
    private DebtModel HighDebt;
    private DebtModel LowDebt;
    private decimal ClearDebt = 0;
    private decimal RemainingDebt = 0;
    private List<DebtModel> PendingDebts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            if (string.IsNullOrEmpty(userId))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var id = int.Parse(userId);

            // Fetch total earnings, outflows, and other statistics
            TotalEarnings = TransactionService.CalculateTotalIncome(id);
            TotalOutflows = TransactionService.CalculateTotalExpenses(id);
            TotalWealth = TotalEarnings - TotalOutflows;

            // Get total transactions and total transaction value
            TotalTransactions = TransactionService.GetTotalTransactions(id);
            TotalTransactionValue = TransactionService.GetUserTransactions(id).Sum(t => t.Amount);

            // Fetch highest and lowest inflow
            HigInflow = TransactionService.GetHighIncome(id);
            LowInflow = TransactionService.GetLowIncome(id);

            // Fetch highest and lowest outflow
            HigOutflow = TransactionService.GetHighExpense(id);
            LowOutflow = TransactionService.GetLowExpense(id);

            // Calculate debt information
            ClearDebt = DebtService.CalClearedDebt(id);
            RemainingDebt = DebtService.CalRemainingDebt(id);

            // Fetch highest and lowest debts
            HighDebt = DebtService.GetHighDebt(id);
            LowDebt = DebtService.GetLowDebt(id);

            // Load all transactions initially
            FilteredItems = TransactionService.GetUserTransactions(id);

            // Fetch pending debts for the user
            PendingDebts = DebtService.GetPendingDebts(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
    }

    private void FilterTransactionByDate()
    {
        var userId = int.Parse(JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId").Result);

        // Filter the transactions based on the selected date range
        FilteredItems = TransactionService
            .GetUserTransactions(userId)
            .Where(t => t.Date >= StartDate && t.Date <= EndDate)
            .ToList();

        // Ensure UI updates after the filter is applied
        StateHasChanged();
    }

    private void Logout()
    {
        JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");
        NavigationManager.NavigateTo("/login");
    }
}

