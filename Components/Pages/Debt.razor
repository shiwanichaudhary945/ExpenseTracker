@page "/debt"
@using ExpenseTracker.Models
@inject DebtService DebtService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    /* Save and Cancel Button Styles */
    .btn-success {
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 10px 14px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-success:hover {
            background-color: #218838;
        }

        .btn-success:active {
            background-color: #1e7e34;
            transform: scale(0.95);
        }

    /* Custom Select Styling */
    .form-select {
        appearance: none;
        background-color: #f1f5f9;
        border: 2px solid #d1d5db;
        border-radius: 6px;
        padding: 8px 12px;
        font-size: 14px;
        color: #374151;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    /* Form Input Styling */
    .form-control {
        font-size: 14px;
        padding: 8px 12px;
    }

    /* Form Card Styling */
    .card {
        padding: 16px;
        border-radius: 10px;
        background-color: #ffffff;
        width: 320px;
    }
</style>

<section class="bg-gradient-to-r from-indigo-500 via-purple-600 to-pink-500">
    <div class="d-flex justify-content-center align-items-center min-vh-100">
        <!-- Debt Form -->
        <div class="card shadow-lg border-0">
            <h2 class="text-center mb-3 fw-bold" style="color: #28a745;">Debt Details</h2>

            <!-- Debt Form -->
            <form @onsubmit="OnSaveDebt">
                <!-- Amount Input -->
                <div class="mb-2">
                    <label for="Amount" class="form-label">Total Debt Amount</label>
                    <input type="number" class="form-control" placeholder="Amount" @bind="DebtAmount" required min="0" step="any" id="Amount">
                </div>

                <!-- Paid Amount Input -->
                <div class="mb-2">
                    <label for="PaidAmount" class="form-label">Return Amount</label>
                    <input type="number" class="form-control" placeholder="Paid Amount" @bind="PaidAmount" min="0" step="any" id="PaidAmount">
                </div>

                <!-- Source Dropdown -->
                <div class="mb-2">
                    <label for="Source" class="form-label">Source</label>
                    <select class="form-select" @bind="DebtSource" id="Source">
                        <option disabled value="">Select Source</option>
                        <option value="bank">Bank</option>
                        <option value="cash">Cash</option>
                        <option value="online">Online</option>
                        <option value="other">Other</option>
                    </select>
                </div>

                <!-- Debt Type Dropdown -->
                <div class="mb-2">
                    <label for="DebtType" class="form-label">Debt Type</label>
                    <select class="form-select" @bind="DebtType" required id="DebtType">
                        <option disabled selected value="">Select Debt Type</option>
                        <option value="debtIn">Debt In</option>
                        <option value="debtOut">Debt Out</option>
                    </select>
                </div>

                <!-- Due Date Input -->
                <div class="mb-2">
                    <label for="DueDate" class="form-label">Due Date</label>
                    <input type="date" class="form-control" @bind="DueDate" required id="DueDate">
                </div>

                <!-- Notes Input -->
                <div class="mb-2">
                    <label for="Notes" class="form-label">Notes</label>
                    <textarea class="form-control" rows="2" placeholder="Notes" @bind="DebtNotes" id="Notes"></textarea>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex justify-content-between mt-3">
                    <button type="submit" class="btn btn-success w-50 me-2">Save Debt</button>
                    <button type="button" class="btn btn-success w-50" @onclick="OnCancel">Cancel</button>
                </div>
            </form>
            <!-- Success/Message -->
            @if (!string.IsNullOrEmpty(Message))
            {
                <p class="text-center text-muted mt-3">@Message</p>
            }
        </div>
    </div>
</section>



          

@code {
    private decimal DebtAmount = 0;
    private decimal PaidAmount = 0;
    private DateTime DueDate = DateTime.Now; // Ensure DueDate is correctly initialized
    private string DebtSource = "";
    private string DebtNotes = "";
    private string Message = "";
    private DebtType DebtType = DebtType.debtIn; // Default to 'debtIn'

    private List<DebtModel> Debts = new();

    protected override void OnInitialized()
    {
        // Load existing debts from the DebtService
        Debts = DebtService.GetAllDebts();
    }

    private async Task OnSaveDebt()
    {
        // Retrieve the userId from localStorage
        var userIdString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

        if (string.IsNullOrEmpty(userIdString) || !int.TryParse(userIdString, out var userId))
        {
            Message = "Please log in. User ID not found.";
            return;
        }

        // Generate a unique Debt ID (Same logic as transaction ID)
        var newDebtId = Debts.Any() ? Debts.Max(d => d.Id) + 1 : 1;

        // Save the debt only if the form is valid
        if (DebtAmount <= 0 || string.IsNullOrWhiteSpace(DebtSource))
        {
            Message = "Amount required.";
            return;
        }

        // Create a new DebtModel
        var newDebt = new DebtModel
            {
                Id = newDebtId, // Assign the new unique Debt ID
                UserId = userId, // Associate the debt with the user
                Amount = DebtAmount,
                PaidAmount = PaidAmount,
                Source = DebtSource,
                Notes = DebtNotes,
                Date = DateTime.Now, // Current date as the creation date
                Type = DebtType // Assign the selected DebtType
            };

        // Save the new debt using DebtService
        Debts.Add(newDebt); // Add the new debt to the local list
        DebtService.SaveDebts(Debts); // Save the updated list of debts

        Message = "Debt saved successfully.";

        // Optionally reset the form or redirect
        DebtAmount = 0;
        PaidAmount = 0;
        DebtSource = "";
        DebtNotes = "";
    }

    private void OnCancel()
    {
        // Reload the current page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}


   